{
  "version": 3,
  "sources": ["../../../../node_modules/@interactjs/dev-tools/visualizer/plugin.ts", "../../../../node_modules/@interactjs/dev-tools/plugin.ts", "../../../../node_modules/@interactjs/dev-tools/index.ts"],
  "sourcesContent": ["export default {}\n", "// eslint-disable-next-line import/no-extraneous-dependencies, import/no-duplicates\nimport '@interactjs/dev-tools/visualizer/plugin'\n\nimport type Interaction from '@interactjs/core/Interaction'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { Element, OptionMethod } from '@interactjs/core/types'\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-duplicates\nimport visualizer from '@interactjs/dev-tools/visualizer/plugin'\nimport domObjects from '@interactjs/utils/domObjects'\nimport { parentNode } from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport * as win from '@interactjs/utils/window'\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    logger: Logger\n  }\n}\n\ndeclare module '@interactjs/core/InteractStatic' {\n  export interface InteractStatic {\n    visializer: typeof visualizer\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface BaseDefaults {\n    devTools?: DevToolsOptions\n  }\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    devTools: OptionMethod<DevToolsOptions>\n  }\n}\n\nexport interface DevToolsOptions {\n  ignore: { [P in keyof typeof CheckName]?: boolean }\n}\n\nexport interface Logger {\n  warn: (...args: any[]) => void\n  error: (...args: any[]) => void\n  log: (...args: any[]) => void\n}\n\nexport interface Check {\n  name: CheckName\n  text: string\n  perform: (interaction: Interaction) => boolean\n  getInfo: (interaction: Interaction) => any[]\n}\n\nenum CheckName {\n  touchAction = 'touchAction',\n  boxSizing = 'boxSizing',\n  noListeners = 'noListeners',\n}\n\nconst prefix = '[interact.js] '\nconst links = {\n  touchAction: 'https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action',\n  boxSizing: 'https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing',\n}\n\n// eslint-disable-next-line no-undef\nconst isProduction = process.env.NODE_ENV === 'production'\n\nfunction install (scope: Scope, { logger }: { logger?: Logger } = {}) {\n  const { Interactable, defaults } = scope\n\n  scope.logger = logger || console\n\n  defaults.base.devTools = {\n    ignore: {},\n  }\n\n  Interactable.prototype.devTools = function (options?: object) {\n    if (options) {\n      extend(this.options.devTools, options)\n      return this\n    }\n\n    return this.options.devTools\n  }\n\n  scope.usePlugin(visualizer)\n}\n\nconst checks: Check[] = [\n  {\n    name: CheckName.touchAction,\n    perform ({ element }) {\n      return !parentHasStyle(element, 'touchAction', /pan-|pinch|none/)\n    },\n    getInfo ({ element }) {\n      return [element, links.touchAction]\n    },\n    text: 'Consider adding CSS \"touch-action: none\" to this element\\n',\n  },\n\n  {\n    name: CheckName.boxSizing,\n    perform (interaction) {\n      const { element } = interaction\n\n      return (\n        interaction.prepared.name === 'resize' &&\n        element instanceof domObjects.HTMLElement &&\n        !hasStyle(element, 'boxSizing', /border-box/)\n      )\n    },\n    text: 'Consider adding CSS \"box-sizing: border-box\" to this resizable element',\n    getInfo ({ element }) {\n      return [element, links.boxSizing]\n    },\n  },\n\n  {\n    name: CheckName.noListeners,\n    perform (interaction) {\n      const actionName = interaction.prepared.name\n      const moveListeners = interaction.interactable.events.types[`${actionName}move`] || []\n\n      return !moveListeners.length\n    },\n    getInfo (interaction) {\n      return [interaction.prepared.name, interaction.interactable]\n    },\n    text: 'There are no listeners set for this action',\n  },\n]\n\nfunction hasStyle (element: HTMLElement, prop: keyof CSSStyleDeclaration, styleRe: RegExp) {\n  const value = element.style[prop] || win.window.getComputedStyle(element)[prop]\n  return styleRe.test((value || '').toString())\n}\n\nfunction parentHasStyle (element: Element, prop: keyof CSSStyleDeclaration, styleRe: RegExp) {\n  let parent = element as HTMLElement\n\n  while (is.element(parent)) {\n    if (hasStyle(parent, prop, styleRe)) {\n      return true\n    }\n\n    parent = parentNode(parent) as HTMLElement\n  }\n\n  return false\n}\n\nconst id = 'dev-tools'\nconst defaultExport: Plugin = isProduction\n  ? { id, install: () => {} }\n  : {\n    id,\n    install,\n    listeners: {\n      'interactions:action-start': ({ interaction }, scope) => {\n        for (const check of checks) {\n          const options = interaction.interactable && interaction.interactable.options\n\n          if (\n            !(options && options.devTools && options.devTools.ignore[check.name]) &&\n              check.perform(interaction)\n          ) {\n            scope.logger.warn(prefix + check.text, ...check.getInfo(interaction))\n          }\n        }\n      },\n    },\n    checks,\n    CheckName,\n    links,\n    prefix,\n  }\n\nexport default defaultExport\n", "/* eslint-disable no-console, eol-last, import/no-duplicates,  import/no-extraneous-dependencies, import/order */\nimport '@interactjs/dev-tools/plugin'\nimport interact from '@interactjs/interact/index'\nimport plugin from '@interactjs/dev-tools/plugin'\ninteract.use(plugin)"],
  "mappings": "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",
  "names": ["CheckName", "prefix", "links", "touchAction", "boxSizing", "isProduction", "install", "scope", "logger", "Interactable", "defaults", "console", "base", "devTools", "ignore", "prototype", "options", "extend", "usePlugin", "visualizer", "checks", "name", "perform", "element", "parentHasStyle", "getInfo", "text", "interaction", "prepared", "domObjects", "HTMLElement", "hasStyle", "noListeners", "actionName", "moveListeners", "interactable", "events", "types", "length", "prop", "styleRe", "value", "style", "window", "getComputedStyle", "test", "toString", "parent", "is", "parentNode", "id", "defaultExport", "listeners", "check", "warn", "plugin_default", "interact", "use", "plugin"]
}
