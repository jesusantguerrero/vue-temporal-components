{
  "version": 3,
  "sources": ["../../../../node_modules/@interactjs/actions/drag/plugin.ts", "../../../../node_modules/@interactjs/actions/drag/index.ts"],
  "sourcesContent": ["import type { InteractEvent } from '@interactjs/core/InteractEvent'\nimport type { Interactable } from '@interactjs/core/Interactable'\nimport type { PerActionDefaults } from '@interactjs/core/options'\nimport type { Scope, Plugin } from '@interactjs/core/scope'\nimport type { ActionMethod, ListenersArg } from '@interactjs/core/types'\nimport is from '@interactjs/utils/is'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    draggable: DraggableMethod\n  }\n}\n\ndeclare module '@interactjs/core/options' {\n  interface ActionDefaults {\n    drag: DraggableOptions\n  }\n}\n\ndeclare module '@interactjs/core/types' {\n  interface ActionMap {\n    drag?: typeof drag\n  }\n}\n\nexport type DragEvent = InteractEvent<'drag'>\n\nexport type DraggableMethod = ActionMethod<DraggableOptions>\n\nexport interface DraggableOptions extends PerActionDefaults {\n  startAxis?: 'x' | 'y' | 'xy'\n  lockAxis?: 'x' | 'y' | 'xy' | 'start'\n  oninertiastart?: ListenersArg\n  onstart?: ListenersArg\n  onmove?: ListenersArg\n  onend?: ListenersArg\n}\n\nfunction install (scope: Scope) {\n  const { actions, Interactable, defaults } = scope\n\n  Interactable.prototype.draggable = drag.draggable\n\n  actions.map.drag = drag\n  actions.methodDict.drag = 'draggable'\n\n  defaults.actions.drag = drag.defaults\n}\n\nfunction beforeMove ({ interaction }) {\n  if (interaction.prepared.name !== 'drag') return\n\n  const axis = interaction.prepared.axis\n\n  if (axis === 'x') {\n    interaction.coords.cur.page.y = interaction.coords.start.page.y\n    interaction.coords.cur.client.y = interaction.coords.start.client.y\n\n    interaction.coords.velocity.client.y = 0\n    interaction.coords.velocity.page.y = 0\n  } else if (axis === 'y') {\n    interaction.coords.cur.page.x = interaction.coords.start.page.x\n    interaction.coords.cur.client.x = interaction.coords.start.client.x\n\n    interaction.coords.velocity.client.x = 0\n    interaction.coords.velocity.page.x = 0\n  }\n}\n\nfunction move ({ iEvent, interaction }) {\n  if (interaction.prepared.name !== 'drag') return\n\n  const axis = interaction.prepared.axis\n\n  if (axis === 'x' || axis === 'y') {\n    const opposite = axis === 'x' ? 'y' : 'x'\n\n    iEvent.page[opposite] = interaction.coords.start.page[opposite]\n    iEvent.client[opposite] = interaction.coords.start.client[opposite]\n    iEvent.delta[opposite] = 0\n  }\n}\n\n/**\n * ```js\n * interact(element).draggable({\n *     onstart: function (event) {},\n *     onmove : function (event) {},\n *     onend  : function (event) {},\n *\n *     // the axis in which the first movement must be\n *     // for the drag sequence to start\n *     // 'xy' by default - any direction\n *     startAxis: 'x' || 'y' || 'xy',\n *\n *     // 'xy' by default - don't restrict to one axis (move in any direction)\n *     // 'x' or 'y' to restrict movement to either axis\n *     // 'start' to restrict movement to the axis the drag started in\n *     lockAxis: 'x' || 'y' || 'xy' || 'start',\n *\n *     // max number of drags that can happen concurrently\n *     // with elements of this Interactable. Infinity by default\n *     max: Infinity,\n *\n *     // max number of drags that can target the same element+Interactable\n *     // 1 by default\n *     maxPerElement: 2\n * })\n *\n * var isDraggable = interact('element').draggable(); // true\n * ```\n *\n * Get or set whether drag actions can be performed on the target\n *\n * @alias Interactable.prototype.draggable\n *\n * @param {boolean | object} [options] true/false or An object with event\n * listeners to be fired on drag events (object makes the Interactable\n * draggable)\n * @return {boolean | Interactable} boolean indicating if this can be the\n * target of drag events, or this Interctable\n */\nconst draggable: DraggableMethod = function draggable (\n  this: Interactable,\n  options?: DraggableOptions | boolean,\n): any {\n  if (is.object(options)) {\n    this.options.drag.enabled = options.enabled !== false\n    this.setPerAction('drag', options)\n    this.setOnEvents('drag', options)\n\n    if (/^(xy|x|y|start)$/.test(options.lockAxis)) {\n      this.options.drag.lockAxis = options.lockAxis\n    }\n    if (/^(xy|x|y)$/.test(options.startAxis)) {\n      this.options.drag.startAxis = options.startAxis\n    }\n\n    return this\n  }\n\n  if (is.bool(options)) {\n    this.options.drag.enabled = options\n\n    return this\n  }\n\n  return this.options.drag as DraggableOptions\n}\n\nconst drag: Plugin = {\n  id: 'actions/drag',\n  install,\n  listeners: {\n    'interactions:before-action-move': beforeMove,\n    'interactions:action-resume': beforeMove,\n\n    // dragmove\n    'interactions:action-move': move,\n    'auto-start:check': (arg) => {\n      const { interaction, interactable, buttons } = arg\n      const dragOptions = interactable.options.drag\n\n      if (\n        !(dragOptions && dragOptions.enabled) ||\n        // check mouseButton setting if the pointer is down\n        (interaction.pointerIsDown &&\n          /mouse|pointer/.test(interaction.pointerType) &&\n          (buttons & interactable.options.drag.mouseButtons) === 0)\n      ) {\n        return undefined\n      }\n\n      arg.action = {\n        name: 'drag',\n        axis: dragOptions.lockAxis === 'start' ? dragOptions.startAxis : dragOptions.lockAxis,\n      }\n\n      return false\n    },\n  },\n  draggable,\n  beforeMove,\n  move,\n  defaults: {\n    startAxis: 'xy',\n    lockAxis: 'xy',\n  } as DraggableOptions,\n\n  getCursor () {\n    return 'move'\n  },\n}\n\nexport default drag\n", "/* eslint-disable no-console, eol-last, import/no-duplicates,  import/no-extraneous-dependencies, import/order */\nimport '@interactjs/actions/drag/plugin'\nimport interact from '@interactjs/interact/index'\nimport plugin from '@interactjs/actions/drag/plugin'\ninteract.use(plugin)"],
  "mappings": "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",
  "names": ["install", "scope", "actions", "Interactable", "defaults", "prototype", "draggable", "drag", "map", "methodDict", "beforeMove", "interaction", "prepared", "name", "axis", "coords", "cur", "page", "y", "start", "client", "velocity", "x", "move", "iEvent", "opposite", "delta", "options", "is", "object", "enabled", "setPerAction", "setOnEvents", "test", "lockAxis", "startAxis", "bool", "id", "listeners", "arg", "interactable", "buttons", "dragOptions", "pointerIsDown", "pointerType", "mouseButtons", "undefined", "action", "getCursor", "interact", "use", "plugin"]
}
